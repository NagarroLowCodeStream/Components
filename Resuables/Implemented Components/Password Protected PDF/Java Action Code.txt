// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package myfirstmodule.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import org.apache.pdfbox.pdmodel.PDDocument;
import org.apache.pdfbox.pdmodel.encryption.AccessPermission;
import org.apache.pdfbox.pdmodel.encryption.StandardProtectionPolicy;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.logging.ILogNode;
import java.io.*;

public class SecurePDF extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject __PDF;
	private myfirstmodule.proxies.PDF PDF;
	private java.lang.String PDF_Password;

	public SecurePDF(IContext context, IMendixObject PDF, java.lang.String PDF_Password)
	{
		super(context);
		this.__PDF = PDF;
		this.PDF_Password = PDF_Password;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		this.PDF = this.__PDF == null ? null : myfirstmodule.proxies.PDF.initialize(getContext(), __PDF);

		// BEGIN USER CODE
		
		IContext context = getContext();
		ILogNode logger = Core.getLogger("SecurePDF"); 
		logger.trace("Retrieve generated document");
 		logger.info("Running executeAction()");
		PDDocument inputDoc = PDDocument.load(Core.getFileDocumentContent(context, this.PDF.getMendixObject()));
		
		// Define the length of the encryption key.
		// Possible values are 40 or 128 (256 will be available in PDFBox 2.0).
		int keyLength = 128;

		AccessPermission ap = new AccessPermission();

		ap.setCanPrint(false);
		ap.setCanAssembleDocument(false);
		ap.setCanExtractContent(false);
		ap.setCanExtractForAccessibility(false);
		ap.setCanModify(false);

		// Owner password (to open the file with all permissions) is "12345"
		// User password (to open the file but with restricted permissions, is empty here) 
		StandardProtectionPolicy spp = new StandardProtectionPolicy(PDF_Password, PDF_Password, ap);
		//spp.setEncryptionKeyLength(keyLength);
		//spp.setPermissions(ap);
		inputDoc.protect(spp);
		ByteArrayOutputStream output = new ByteArrayOutputStream();
		inputDoc.save(output);
		InputStream newContent = new ByteArrayInputStream(output.toByteArray());		
		logger.trace("Store result in original document");
		Core.storeFileDocumentContent(context, this.PDF.getMendixObject(), newContent);
		
		
		logger.trace("Close PDFs");
		inputDoc.close();
		
		logger.trace("Secure PDF done");
		return true;
		
		//throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Java action was not implemented");
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "SecurePDF";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
